import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int city[][];
    static int travel[];
    static int parent[];

    static void union(int a, int b)
    {
        a = find(a);
        b = find(b);
        if(a != b)
        {
            parent[b] = a;
        }
    }

    static int find(int a)
    {
        if(a == parent[a])
        {
            return a;
        }
        else
        {
            return parent[a] = find(parent[a]);
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());
        int m = Integer.parseInt(st.nextToken());

        city = new int[n + 1][n + 1];
        travel = new int[m + 1];
        parent = new int[n + 1];

        for(int i = 1; i <= n; i++)
        {
            parent[i] = i;
        }

        for(int i = 1; i <= n; i++)
        {
            st = new StringTokenizer(br.readLine());
            for(int j = 1; j <= n; j++)
            {
                city[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        st = new StringTokenizer(br.readLine());
        for(int i = 1; i <= m; i++)
        {
            travel[i] = Integer.parseInt(st.nextToken());
        }

        for(int i = 1; i <= n; i++)
        {
            for(int j = 1; j <= n; j++)
            {
                if(city[i][j] == 1)
                {
                    union(i, j);
                }
            }
        }

        int index = find(travel[1]);

        for(int i = 2; i < travel.length; i++)
        {
            if(index != find(travel[i]))
            {
                System.out.println("NO");
                return;
            }
        }
        System.out.println("YES");

        bw.flush();
        bw.close();
        br.close();
    }
}
