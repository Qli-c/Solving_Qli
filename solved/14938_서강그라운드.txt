import java.io.*;
import java.util.*;

class Edge implements Comparable<Edge>
{
    int v, w;

    Edge(int v, int w)
    {
        this.v = v;
        this.w = w;
    }

    public int compareTo(Edge e)
    {
        if(this.w > e.w)
        {
            return 1;
        }
        else
        {
            return -1;
        }
    }
}

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int r = Integer.parseInt(st.nextToken());

        ArrayList<Edge> arr[] = new ArrayList[n + 1];

        int item[] = new int[n + 1];
        int answer[] = new int[n + 1];


        st = new StringTokenizer(br.readLine());
        for(int i = 1; i <= n; i++)
        {
            arr[i] = new ArrayList<>();
            item[i] = Integer.parseInt(st.nextToken());
        }

        for(int i = 0; i < r; i++)
        {
            st = new StringTokenizer(br.readLine());
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());

            arr[s].add(new Edge(e, v));
            arr[e].add(new Edge(s, v));
        }

        for(int i = 1; i <= n; i++)
        {
            boolean visited[] = new boolean[n + 1];
            int distance[] = new int[n + 1];
            Arrays.fill(distance, Integer.MAX_VALUE);

            PriorityQueue<Edge> queue = new PriorityQueue<>();
            queue.add(new Edge(i, 0));
            distance[i] = 0;

            while(!queue.isEmpty())
            {
                Edge now = queue.poll();

                if(visited[now.v])
                {
                    continue;
                }

                answer[i] += item[now.v];
                visited[now.v] = true;
                for(Edge next : arr[now.v])
                {
                    if(!visited[next.v] && distance[next.v] > distance[now.v] + next.w && (distance[now.v] + next.w) <= m)
                    {
                        distance[next.v] = distance[now.v] + next.w;
                        queue.add(new Edge(next.v, distance[next.v]));
                    }
                }
            }
        }

        Arrays.sort(answer);

        System.out.println(answer[n]);

        bw.flush();
        bw.close();
        br.close();
    }
}
