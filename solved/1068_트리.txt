import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static ArrayList<Integer>[] arr;
    static boolean visited[];
    static int answer = 0;
    static int deleteNode;

    static void DFS(int v)
    {
        visited[v] = true;
        int child = 0;

        for(int i : arr[v])
        {
            if(!visited[i] && i != deleteNode)
            {
                child++;
                DFS(i);
            }
        }
        if(child == 0)
        {
            answer++;
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        arr = new ArrayList[n];
        visited = new boolean[n];
        int root = 0;

        for(int i = 0; i < arr.length; i++)
        {
            arr[i] = new ArrayList<>();
        }

        st = new StringTokenizer(br.readLine());

        for(int i = 0; i < n; i++)
        {
            int parent = Integer.parseInt(st.nextToken());

            if(parent != -1)
            {
                arr[i].add(parent);
                arr[parent].add(i);
            }
            else
            {
                root = i;
            }
        }

        st = new StringTokenizer(br.readLine());
        deleteNode = Integer.parseInt(st.nextToken());

        if(deleteNode == root)
        {
            System.out.println("0");
        }
        else
        {
            DFS(root);
            System.out.println(answer);
        }

        bw.flush();
        bw.close();
        br.close();
    }
}