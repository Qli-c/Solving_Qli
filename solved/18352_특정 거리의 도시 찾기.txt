import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int visited[];
    static ArrayList<Integer>[] arr;
    static int n, m, k, x;

    static void BFS(int node)
    {
        Queue<Integer> queue = new LinkedList<Integer>();
        queue.add(node);
        visited[node]++;

        while(!queue.isEmpty())
        {
            int now = queue.poll();
            for(int i : arr[now])
            {
                if(visited[i] == -1)
                {
                    visited[i] = visited[now] + 1;
                    queue.add(i);
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken());
        x = Integer.parseInt(st.nextToken());
        arr = new ArrayList[n + 1];
        visited = new int[n + 1];

        for(int i = 0; i <= n; i++)
        {
            arr[i] = new ArrayList<Integer>();
            visited[i] = -1;
        }

        for(int i = 0; i < m; i++)
        {
            st = new StringTokenizer(br.readLine());
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            arr[s].add(e);
        }

        BFS(x);

        int check = 0;

        for(int i = 1; i <= n; i++)
        {
            if(visited[i] == k)
            {
                check = 1;
                System.out.println(i);
            }
        }

        if(check == 0)
        {
            System.out.println("-1");
        }

        bw.flush();
        bw.close();
        br.close();
    }
}