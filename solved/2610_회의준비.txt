import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int distance[][];
    static boolean visited[];

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());
        int m = Integer.parseInt(st.nextToken());

        distance = new int[n + 1][n + 1];
        visited = new boolean[n + 1];
        PriorityQueue<Integer> queue = new PriorityQueue<>();

        for(int i = 0; i <= n; i++)
        {
            for(int j = 0; j <= n; j++)
            {
                if(i == j)
                {
                    distance[i][j] = 0;
                }
                else
                {
                    distance[i][j] = 9999999;
                }
            }
        }

        for(int i = 0; i < m; i++)
        {
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());

            distance[start][end] = 1;
            distance[end][start] = 1;
        }

        for(int k = 1; k <= n; k++)
        {
            for(int i = 1; i <= n; i++)
            {
                for(int j = 1; j <= n; j++)
                {
                    if(distance[i][j] > distance[i][k] + distance[k][j])
                    {
                        distance[i][j] = distance[i][k] + distance[k][j];
                        distance[j][i] = distance[i][j];
                    }
                }
            }
        }

        int count = 0;
        for(int start = 1; start <= n; start++)
        {
            if(visited[start])
            {
                continue;
            }
            LinkedList<Integer> list = new LinkedList<>();

            for(int j = 1; j <= n; j++)
            {
                if(distance[start][j] != 9999999)
                {
                    list.addLast(j);
                    visited[j] = true;
                }
            }

            int rep = 0;
            int max = 9999999;

            for(int i = 0; i < list.size(); i++)
            {
                int group_start = list.get(i);
                int group_max = -1;
                for(int j = 0; j < list.size(); j++)
                {
                    int group_end = list.get(j);
                    if(distance[group_start][group_end] != 9999999)
                    {
                        group_max = Math.max(group_max, distance[group_start][group_end]);
                    }
                }
                if(max > group_max)
                {
                    max = group_max;
                    rep = group_start;
                }
            }

            queue.add(rep);

            count++;

        }

        System.out.println(count);
        while(!queue.isEmpty())
        {
            System.out.println(queue.poll());
        }

        bw.flush();
        bw.close();
        br.close();
    }
}
