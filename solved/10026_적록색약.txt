import javax.swing.plaf.metal.MetalIconFactory;
import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int n;
    static char arr[][];
    static boolean visited[][];
    static int dx[] = {0, 1, 0, -1};
    static int dy[] = {1, 0, -1, 0};

    public void DFS(int x, int y)
    {
        visited[x][y] = true;
        char color = arr[x][y];

        for(int i = 0; i < 4; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if(0 <= nx && nx < n && 0 <= ny && ny < n)
            {
                if(arr[nx][ny] == color && !visited[nx][ny])
                {
                    DFS(nx, ny);
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }


    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());

        arr = new char[n][n];
        visited = new boolean[n][n];
        int answer = 0;
        int rg_answer = 0;

        for(int i = 0; i < n; i++)
        {
            String s = br.readLine();
            for(int j = 0; j < n; j++)
            {
                arr[i][j] = s.charAt(j);
            }
        }

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(!visited[i][j])
                {
                    answer++;
                    DFS(i, j);
                }
            }
        }

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(arr[i][j] == 'G')
                {
                    arr[i][j] = 'R';
                }
                visited[i][j] = false;
            }
        }

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(!visited[i][j])
                {
                    rg_answer++;
                    DFS(i, j);
                }
            }
        }

        System.out.print(answer + " " + rg_answer);

        bw.flush();
        bw.close();
        br.close();
    }
}
