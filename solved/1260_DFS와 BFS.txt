import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static ArrayList<Integer>[] arr;
    static boolean visited[];

    static void DFS(int v)
    {
        visited[v] = true;
        System.out.print(v + " ");

        for(int i : arr[v])
        {
            if(!visited[i])
            {
                DFS(i);
            }
        }
    }

    static void BFS(int v)
    {
        Queue<Integer> queue = new LinkedList<Integer>();
        queue.add(v);
        visited[v] = true;

        while(!queue.isEmpty())
        {
            int now = queue.poll();
            System.out.print(now + " ");
            for (int i : arr[now])
            {
                if(!visited[i])
                {
                    visited[i] = true;
                    queue.add(i);
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int v = Integer.parseInt(st.nextToken());
        arr = new ArrayList[n + 1];

        for(int i = 1; i <= n; i++)
        {
            arr[i] = new ArrayList<Integer>();
        }

        for(int i = 0; i < m; i++)
        {
            st = new StringTokenizer(br.readLine());
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());

            arr[s].add(e);
            arr[e].add(s);
        }
        for(int i = 1; i <= n; i++)
        {
            Collections.sort(arr[i]);
        }

        visited = new boolean[n + 1];
        DFS(v);
        System.out.println();

        visited = new boolean[n + 1];
        BFS(v);


        bw.flush();
        bw.close();
        br.close();
    }
}