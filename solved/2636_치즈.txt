import javax.swing.plaf.metal.MetalIconFactory;
import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int n, m;
    static int arr[][];
    static boolean visited[][];
    static int dx[] = {0, 1, 0, -1};
    static int dy[] = {1, 0, -1, 0};
    static int cheese = 0;
    static int time = 0;

    public void BFS()
    {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {0,0});
        visited[0][0] = true;

        while(!queue.isEmpty())
        {
            int[] now = queue.poll();

            for(int i = 0; i < 4; i++)
            {
                int nx = now[0] + dx[i];
                int ny = now[1] + dy[i];

                if(nx >= 0 && nx < n && ny >= 0 && ny < m && visited[nx][ny] == false)
                {
                    visited[nx][ny] = true;
                    if(arr[nx][ny] == 0)
                    {
                        queue.add(new int[] {nx, ny});
                    }
                    else
                    {
                        cheese--;
                        arr[nx][ny] = 0;
                    }
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }


    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());

        arr = new int[n][m];

        for(int i = 0; i < n; i++)
        {
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < m; j++)
            {
                arr[i][j] = Integer.parseInt(st.nextToken());
                if(arr[i][j] == 1)
                {
                    cheese++;
                }
            }
        }

        int result = 0;

        while(cheese != 0)
        {
            result = cheese;
            visited = new boolean[n][m];
            BFS();
            time++;
        }

        System.out.println(time);
        System.out.println(result);

        bw.flush();
        bw.close();
        br.close();
    }
}
