import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int dx[] = {0, 1, 0, -1};
    static int dy[] = {1, 0, -1, 0};
    static boolean visited[][];
    static int arr[][];
    static int n;

    public void BFS(int i, int j, int count)
    {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {i, j});
        visited[i][j] = true;
        arr[i][j] = count;

        while(!queue.isEmpty())
        {
            int now[] = queue.poll();
            {
                for(int k = 0; k < 4; k++)
                {
                    int nx = now[0] + dx[k];
                    int ny = now[1] + dy[k];

                    if(nx >= 0 && ny >= 0 && nx < n && ny < n && !visited[nx][ny] && arr[nx][ny] == 1)
                    {
                        visited[nx][ny] = true;
                        arr[nx][ny] = count;
                        queue.add(new int[] {nx, ny});
                    }
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());

        arr = new int[n][n];
        visited = new boolean[n][n];

        for(int i = 0; i < n; i++)
        {
            st = new StringTokenizer(br.readLine());
            String line = st.nextToken();
            for(int j = 0; j < n; j++)
            {
                arr[i][j] = Integer.parseInt(String.valueOf(line.charAt(j)));
            }
        }

        int count = 2;

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if (!visited[i][j] && arr[i][j] == 1)
                {
                    BFS(i, j, count);
                    count++;
                }
            }
        }

        PriorityQueue<Integer> queue = new PriorityQueue<>();

        for(int i = 2; i < count; i++)
        {
            int sum = 0;
            for(int j = 0; j < n; j++)
            {
                for(int k = 0; k < n; k++)
                {
                    if(arr[j][k] == i)
                    {
                        sum++;
                    }
                }
            }
            queue.add(sum);
        }

        System.out.println(count - 2);
        while(!queue.isEmpty())
        {
            System.out.println(queue.poll());
        }

        bw.flush();
        bw.close();
        br.close();
    }
}
