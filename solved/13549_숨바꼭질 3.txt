import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int n, k;
    static boolean visited[];

    public void BFS(int n)
    {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {n, 0});
        visited[n] = true;

        while(!queue.isEmpty())
        {
            int now[] = queue.poll();

            if(now[0] == k)
            {
                System.out.println(now[1]);
                return;
            }

            for(int i = 0; i < 3; i++)
            {
                int next;
                int time;

                if(i == 0)
                {
                    next = now[0] * 2;
                    time = now[1];
                }

                else if(i == 1)
                {
                    next = now[0] - 1;
                    time = now[1] + 1;
                }

                else
                {
                    next = now[0] + 1;
                    time = now[1] + 1;
                }

                if(next >= 0 && next <= 100000 && !visited[next])
                {
                    queue.add(new int[] {next, time});
                    visited[next] = true;
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken());

        visited = new boolean[100001];

        BFS(n);

        bw.flush();
        bw.close();
        br.close();
    }
}
