import java.io.*;
import java.lang.reflect.Array;
import java.util.*;

class Edge
{
    int start, end, time;

    public Edge(int start, int end, int time)
    {
        this.start = start;
        this.end = end;
        this.time = time;
    }
}

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int distance[];
    static Edge edges[];

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int t = Integer.parseInt(st.nextToken());

        for(int i = 0; i < t; i++)
        {
            st = new StringTokenizer(br.readLine());
            int n = Integer.parseInt(st.nextToken());
            int m = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());

            distance = new int[n + 1];
            edges = new Edge[2 * m + w + 1];

            for(int j = 0; j < 2 * m; j = j + 2)
            {
                st = new StringTokenizer(br.readLine());
                int s = Integer.parseInt(st.nextToken());
                int e = Integer.parseInt(st.nextToken());
                int time = Integer.parseInt(st.nextToken());
                edges[j] = new Edge(s, e, time);
                edges[j + 1] = new Edge(e, s, time);
            }

            for(int j = 2 * m; j < 2 * m + w; j++)
            {
                st = new StringTokenizer(br.readLine());
                int s = Integer.parseInt(st.nextToken());
                int e = Integer.parseInt(st.nextToken());
                int time = Integer.parseInt(st.nextToken());
                edges[j] = new Edge(s, e, -time);
            }

            boolean isChange = false;
            boolean cycle = false;

            for(int start = 1; start <= n; start++)
            {
                Arrays.fill(distance, Integer.MAX_VALUE);
                distance[start] = 0;
                for(int j = 1; j < n; j++)
                {
                    isChange = false;
                    for(int k = 0; k < 2 * m + w; k++)
                    {
                        Edge now = edges[k];

                        if(distance[now.start] != Integer.MAX_VALUE && distance[now.end] > distance[now.start] + now.time)
                        {
                            distance[now.end] = distance[now.start] + now.time;
                            isChange = true;
                        }
                    }
                    if(!isChange)
                    {
                        break;
                    }
                }

                for(int k = 0; k < 2 * m + w; k++)
                {
                    Edge now = edges[k];

                    if(distance[now.start] != Integer.MAX_VALUE && distance[now.end] > distance[now.start] + now.time)
                    {
                        cycle = true;
                    }
                }
                if(cycle)
                {
                    break;
                }
            }


            if(cycle)
            {
                System.out.println("YES");
            }
            else
            {
                System.out.println("NO");
            }
        }

        bw.flush();
        bw.close();
        br.close();
    }
}
