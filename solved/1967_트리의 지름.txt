import java.io.*;
import java.util.*;

class Edge
{
    int e;
    int value;

    public Edge(int e, int value)
    {
        this.e = e;
        this.value = value;
    }
}

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static ArrayList<Edge> arr[];
    static boolean visited[];
    static int distance[];

    public void DFS(int v)
    {
        if(visited[v])
        {
            return;
        }
        visited[v] = true;

        for(Edge i : arr[v])
        {
            int e = i.e;
            int value = i.value;
            if(!visited[e])
            {
                distance[e] = distance[v] + value;
                DFS(e);
            }
        }
    }



    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());

        arr = new ArrayList[n + 1];
        visited = new boolean[n + 1];
        distance = new int[n + 1];

        for(int i = 0; i <= n; i++)
        {
            arr[i] = new ArrayList<>();
        }

        for(int i = 0; i < n - 1; i++)
        {
            st = new StringTokenizer(br.readLine());
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            int value = Integer.parseInt(st.nextToken());
            arr[s].add(new Edge(e, value));
            arr[e].add(new Edge(s, value));
        }

        DFS(1);

        int max = 0;
        int max_node = 0;

        for(int i = 1; i <= n; i++)
        {
            if(max < distance[i])
            {
                max = distance[i];
                max_node = i;
            }
        }

        distance = new int[n + 1];
        visited = new boolean[n + 1];

        DFS(max_node);

        int answer = 0;

        for(int i = 1; i <= n; i++)
        {
            if(answer < distance[i])
            {
                answer = distance[i];
            }
        }

        System.out.println(answer);

        bw.flush();
        bw.close();
        br.close();
    }
}
