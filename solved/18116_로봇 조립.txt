import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int parent[];
    static int count[];

    static int find(int c)
    {
        if(c == parent[c])
        {
            return c;
        }
        else
        {
            return parent[c] = find(parent[c]);
        }
    }

    static void union(int a, int b)
    {
        a = find(a);
        b = find(b);

        if(a != b)
        {
            parent[b] = a;
            count[a] += count[b];
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());

        String order;

        parent = new int[1000001];
        count = new int[1000001];

        for(int i = 1; i <= 1000000; i++)
        {
            parent[i] = i;
            count[i] = 1;
        }

        for(int i = 0; i < n; i++)
        {
            st = new StringTokenizer(br.readLine());
            order = st.nextToken();

            if(order.equals("I"))
            {
                int a = Integer.parseInt(st.nextToken());
                int b = Integer.parseInt(st.nextToken());

                union(a, b);
            }

            else
            {
                int c = Integer.parseInt(st.nextToken());

                System.out.println(count[find(c)]);
            }
        }


        bw.flush();
        bw.close();
        br.close();
    }
}
