import java.io.*;
import java.lang.reflect.Array;
import java.util.*;

class Edge implements Comparable<Edge>
{
    int v, w;

    Edge(int v, int w)
    {
        this.v = v;
        this.w = w;
    }

    public int compareTo(Edge e)
    {
        if(this.w > e.w)
        {
            return 1;
        }
        else
        {
            return -1;
        }
    }

}
public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());

        ArrayList<Edge> arr[] = new ArrayList[n + 1];
        boolean visited[] = new boolean[n + 1];
        int distance[] = new int[n + 1];

        Arrays.fill(distance, Integer.MAX_VALUE);

        for(int i = 1; i <= n; i++)
        {
            arr[i] = new ArrayList<>();
        }

        for(int i = 0; i < m; i++)
        {
            st = new StringTokenizer(br.readLine());
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());

            arr[s].add(new Edge(e, w));
            arr[e].add(new Edge(s, w));
        }

        PriorityQueue<Edge> queue = new PriorityQueue<>();
        queue.add(new Edge(1, 0));
        distance[1] = 0;

        while(!queue.isEmpty())
        {
            Edge now = queue.poll();

            if(visited[now.v])
            {
                continue;
            }

            visited[now.v] = true;

            for(Edge next : arr[now.v])
            {
                if(!visited[next.v] && distance[next.v] > distance[now.v] + next.w)
                {
                    distance[next.v] = distance[now.v] + next.w;
                    queue.add(new Edge(next.v, distance[next.v]));
                }
            }
        }

        System.out.println(distance[n]);

        bw.flush();
        bw.close();
        br.close();
    }
}
