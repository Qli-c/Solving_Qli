import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public int lower (int[] arr, int target)
    {
        int start = 0;
        int end = arr.length;

        while(start < end)
        {
            int mid = (start + end) / 2;
            if(arr[mid] >= target)
            {
                end = mid;
            }
            else
            {
                start = mid + 1;
            }
        }
        return start;
    }

    public int jong_upper (int[] arr, int target)
    {
        int start = 0;
        int end = arr.length;

        while(start < end)
        {
            int mid = (start + end) / 2;
            if(arr[mid] > target)
            {
                end = mid;
            }
            else
            {
                start = mid + 1;
            }
        }
        return start;
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int h = Integer.parseInt(st.nextToken());

        int seok[] = new int[n/2];
        int jong[] = new int[n/2];

        for(int i = 0; i < n; i++)
        {
            st = new StringTokenizer(br.readLine());
            if(i % 2 == 0)
            {
                seok[i/2] = Integer.parseInt(st.nextToken());
            }
            else
            {
                jong[i/2] = Integer.parseInt(st.nextToken());
            }
        }

        Arrays.sort(seok);
        Arrays.sort(jong);

        int lowest = 9999999;
        int count = 0;

        for(int i = 1; i <= h; i++)
        {
            int target = i;
            int answer = n/2 - lower(seok, target) + n/2 - lower(jong, h - target + 1);
            if(answer < lowest)
            {
                lowest = answer;
                count = 1;
            }

            else if(answer == lowest)
            {
                count++;
            }
        }
        bw.write(lowest + " " + count);

        bw.flush();
        bw.close();
        br.close();
    }
}