import java.io.*;
import java.util.*;

class Edge implements Comparable<Edge>
{
    int s;
    int e;
    int v;

    Edge(int s, int e, int v)
    {
        this.s = s;
        this.e = e;
        this.v = v;
    }

    @Override
    public int compareTo(Edge o)
    {
        return this.v - o.v;
    }
}

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int parent[];
    static PriorityQueue<Edge> queue;

    static void union(int a, int b)
    {
        a = find(a);
        b = find(b);
        if(a != b)
        {
            parent[b] = a;
        }
    }

    static int find(int a)
    {
        if(a == parent[a])
        {
            return a;
        }
        else
        {
            return parent[a] = find(parent[a]);
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int v = Integer.parseInt(st.nextToken());
        int e = Integer.parseInt(st.nextToken());

        parent = new int[v + 1];
        queue = new PriorityQueue<>();


        for(int i = 1; i <= e; i++)
        {
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            int value = Integer.parseInt(st.nextToken());
            queue.add(new Edge(start, end, value));
        }

        for(int i = 1; i <= v; i++)
        {
            parent[i] = i;
        }

        int usedEdge = 0;
        int result = 0;

        while(usedEdge < v - 1)
        {
            Edge now = queue.poll();
            if(find(now.s) != find(now.e))
            {
                union(now.s, now.e);
                result += now.v;
                usedEdge++;
            }
        }

        System.out.println(result);

        bw.flush();
        bw.close();
        br.close();
    }
}
