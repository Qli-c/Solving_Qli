import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int[][] arr;
    static boolean visited[][];
    static int[] dx = {0, 1, 0, -1};
    static int[] dy = {1, 0, -1, 0};
    static int n, m;
    static ArrayList<Integer> list = new ArrayList<>();


    static Integer BFS(int x, int y)
    {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {x, y});
        visited[x][y] = true;
        int count = 0;

        while(!queue.isEmpty())
        {
            int now[] = queue.poll();

            for(int i = 0; i < 4; i++)
            {
                int nx = now[0] + dx[i];
                int ny = now[1] + dy[i];
                if(nx >= 0 && ny >= 0 && nx < m && ny < n)
                {
                    if(arr[nx][ny] == 0 && !visited[nx][ny])
                    {
                        visited[nx][ny] = true;
                        arr[nx][ny] = arr[now[0]][now[1]] + 1;
                        queue.add(new int[] {nx, ny});
                        count++;
                    }
                }
            }
        }
        return count + 1;
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        m = Integer.parseInt(st.nextToken());
        n = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());
        arr = new int[m][n];
        visited = new boolean[m][n];
        int result = 0;

        for(int i = 0; i < k; i++)
        {
            st = new StringTokenizer(br.readLine());
            int left_x = Integer.parseInt(st.nextToken());
            int left_y = Integer.parseInt(st.nextToken());
            int right_x = Integer.parseInt(st.nextToken());
            int right_y = Integer.parseInt(st.nextToken());

            for (int x = left_x; x < right_x; x++)
            {
                for(int y = left_y; y < right_y; y++)
                {
                    arr[y][x] += 1;
                }
            }
        }

        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(arr[i][j] == 0)
                {
                    result++;
                    arr[i][j] = 1;
                    list.add(BFS(i,j));
                }
            }
        }

        Collections.sort(list);
        System.out.println(result);

        for(int i = 0; i < list.size(); i++)
        {
            System.out.print(list.get(i) + " ");
        }


        bw.flush();
        bw.close();
        br.close();
    }
}