import java.io.*;
import java.util.*;

class Edge implements Comparable<Edge>
{
    int vertex, value;
    Edge(int vertex, int value)
    {
        this.vertex = vertex;
        this.value = value;
    }

    public int compareTo(Edge e)
    {
        if(this.value > e.value)
        {
            return 1;
        }
        else
        {
            return -1;
        }
    }
}

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int n, m;
    static int distance[];
    static boolean visited[];
    static ArrayList<Edge> list[];

    public static int dijkstra(int start, int end)
    {
        PriorityQueue<Edge> queue = new PriorityQueue<Edge>();
        queue.add(new Edge(start,0));
        distance[start] = 0;

        while(!queue.isEmpty())
        {
            Edge now = queue.poll();
            int now_vertex = now.vertex;

            if(visited[now_vertex])
            {
                continue;
            }

            visited[now_vertex] = true;

            for(Edge n : list[now_vertex])
            {
                if(!visited[n.vertex] && distance[n.vertex] > distance[now_vertex] + n.value)
                {
                    distance[n.vertex] = distance[now_vertex] + n.value;
                    queue.add(new Edge(n.vertex, distance[n.vertex]));
                }
            }
        }
        return distance[end];
    }


    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());
        int m = Integer.parseInt(st.nextToken());

        distance = new int[n + 1];
        visited = new boolean[n + 1];
        list = new ArrayList[n + 1];

        Arrays.fill(distance, Integer.MAX_VALUE);

        for(int i = 1; i <= n; i++)
        {
            list[i] = new ArrayList<Edge>();
        }

        for(int i = 0; i < m; i++)
        {
            st = new StringTokenizer(br.readLine());
            int u = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());

            list[u].add(new Edge(v, w));
        }

        st = new StringTokenizer(br.readLine());
        int start = Integer.parseInt(st.nextToken());
        int end = Integer.parseInt(st.nextToken());

        bw.write(dijkstra(start, end) + "\n");

        bw.flush();
        bw.close();
        br.close();
    }
}
