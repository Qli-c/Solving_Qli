import javax.swing.plaf.metal.MetalIconFactory;
import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;


    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());

        Stack<Integer> stack = new Stack<>();

        for(int i = 0; i < n; i++)
        {
            st = new StringTokenizer(br.readLine());
            String order = st.nextToken();

            switch(order)
            {
                case "push":
                    int num = Integer.parseInt(st.nextToken());
                    stack.push(num);
                    break;

                case "pop":
                    if(stack.isEmpty())
                    {
                        System.out.println("-1");
                    }
                    else
                    {
                        System.out.println(stack.pop());
                    }
                    break;

                case "size":
                    System.out.println(stack.size());
                    break;

                case "empty":
                    if(stack.isEmpty())
                    {
                        System.out.println("1");
                    }
                    else
                    {
                        System.out.println("0");
                    }
                    break;

                case "top":
                    if(stack.isEmpty())
                    {
                        System.out.println("-1");
                    }
                    else
                    {
                        System.out.println(stack.peek());
                    }
                    break;

                default:

            }
        }

        bw.flush();
        bw.close();
        br.close();
    }
}
