import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static ArrayList<Edge>[] arr;
    static boolean visited[];
    static int[] distance;

    class Edge {
        int e;
        int value;
        public Edge(int e, int value)
        {
            this.e = e;
            this.value = value;
        }
    }


    static void BFS(int index)
    {
        Queue<Integer> queue = new LinkedList<Integer>();
        queue.add(index);
        visited[index] = true;

        while(!queue.isEmpty())
        {
            int now = queue.poll();

            for(Edge i : arr[now])
            {
                int e = i.e;
                int v = i.value;
                if(!visited[e])
                {
                    visited[e] = true;
                    queue.add(e);
                    distance[e] = distance[now] + v;
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());

        arr = new ArrayList[n + 1];

        for (int i = 1; i <= n; i++)
        {
            arr[i] = new ArrayList<Edge>();
        }
        for (int i = 0; i < n; i++)
        {
            st = new StringTokenizer(br.readLine());
            int s = Integer.parseInt(st.nextToken());
            while (true)
            {
                int e = Integer.parseInt(st.nextToken());
                if(e == -1)
                {
                    break;
                }
                int value = Integer.parseInt(st.nextToken());
                arr[s].add(new Edge(e, value));
            }
        }

        distance = new int[n + 1];
        visited = new boolean[n + 1];
        BFS(1);

        int max = 1;

        for(int i = 2; i <= n; i++)
        {
            if(distance[max] < distance[i])
            {
                max = i;
            }
        }

        distance = new int[n + 1];
        visited = new boolean[n + 1];

        BFS(max);
        Arrays.sort(distance);
        System.out.println(distance[n]);


        bw.flush();
        bw.close();
        br.close();
    }
}