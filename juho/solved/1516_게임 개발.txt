import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;


    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());

        ArrayList<ArrayList<Integer>> arr = new ArrayList<>();

        for(int i = 0; i <= n; i++)
        {
            arr.add(new ArrayList<>());
        }
        int indegree[] = new int[n + 1];
        int build[] = new int[n + 1];

        for(int i = 1; i <= n; i++)
        {
            st = new StringTokenizer(br.readLine());
            int time = Integer.parseInt(st.nextToken());
            build[i] = time;
            while(true)
            {
                int pretemp = Integer.parseInt(st.nextToken());

                if(pretemp == -1)
                {
                    break;
                }
                arr.get(pretemp).add(i);
                indegree[i]++;
            }
        }

        Queue<Integer> queue = new LinkedList<>();
        int answer[] = new int[n + 1];
        for(int i = 1; i <= n; i++)
        {
            if(indegree[i] == 0)
            {
                queue.offer(i);
            }
        }

        while(!queue.isEmpty())
        {
            int now = queue.poll();
            for(int next : arr.get(now))
            {
                indegree[next]--;

                answer[next] = Math.max(answer[next], answer[now] + build[now]);
                if(indegree[next] == 0)
                {
                    queue.offer(next);
                }
            }
        }

        for(int i = 1; i <= n; i++)
        {
            System.out.println(answer[i] + build[i]);
        }

        bw.flush();
        bw.close();
        br.close();
    }
}
