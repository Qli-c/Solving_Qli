import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int[][] arr;
    static boolean visited[][];
    static int[] dx = {1, 2, 2, 1, -1, -2, -2, -1};
    static int[] dy = {2, 1, -1, -2, -2, -1, 1, 2};
    static int l;
    static int result;
    static int end_x, end_y;

    static void BFS(int x, int y)
    {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {x, y});
        visited[x][y] = true;

        while(!queue.isEmpty())
        {
            int now[] = queue.poll();

            if(now[0] == end_x && now[1] == end_y)
            {
                System.out.println(arr[end_x][end_y]);
                return;
            }

            for(int i = 0; i < 8; i++)
            {
                int nx = now[0] + dx[i];
                int ny = now[1] + dy[i];
                if(nx >= 0 && ny >= 0 && nx < l && ny < l)
                {
                    if(!visited[nx][ny])
                    {
                        visited[nx][ny] = true;
                        arr[nx][ny] = arr[now[0]][now[1]] + 1;
                        queue.add(new int[] {nx, ny});
                    }
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int testcase = Integer.parseInt(st.nextToken());

        for(int i = 0; i < testcase; i++)
        {
            st = new StringTokenizer(br.readLine());
            l = Integer.parseInt(st.nextToken());
            arr = new int[l][l];
            visited = new boolean[l][l];
            result = 0;

            st = new StringTokenizer(br.readLine());
            int start_x = Integer.parseInt(st.nextToken());
            int start_y = Integer.parseInt(st.nextToken());

            st = new StringTokenizer(br.readLine());
            end_x = Integer.parseInt(st.nextToken());
            end_y = Integer.parseInt(st.nextToken());

            BFS(start_x, start_y);
        }

        bw.flush();
        bw.close();
        br.close();
    }
}