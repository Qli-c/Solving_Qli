import java.io.*;
import java.util.*;


class Edge
{
    int start, end, time;
    public Edge(int start, int end, int time)
    {
        this.start = start;
        this.end = end;
        this.time = time;
    }
}

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int n, m;
    static long distance[];
    static Edge edge[];


    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());

        edge = new Edge[m + 1];
        distance = new long[n + 1];

        Arrays.fill(distance, Integer.MAX_VALUE);

        for(int i = 0; i < m; i++)
        {
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            int time = Integer.parseInt(st.nextToken());
            edge[i] = new Edge(start, end, time);
        }

        distance[1] = 0;
        for(int i = 1; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                Edge now = edge[j];
                if(distance[now.start] != Integer.MAX_VALUE && distance[now.end] > distance[now.start] + now.time)
                {
                    distance[now.end] = distance[now.start] + now.time;
                }
            }
        }

        boolean cycle = false;

        for(int i = 0; i < m; i++)
        {
            Edge now = edge[i];
            if(distance[now.start] != Integer.MAX_VALUE && distance[now.end] > distance[now.start] + now.time)
            {
                cycle = true;
            }
        }

        if(!cycle)
        {
            for(int i = 2; i <= n; i++)
            {
                if(distance[i] == Integer.MAX_VALUE)
                {
                    System.out.println("-1");
                }
                else
                {
                    System.out.println(distance[i]);
                }
            }
        }
        else
        {
            System.out.println("-1");
        }

        bw.flush();
        bw.close();
        br.close();
    }
}
