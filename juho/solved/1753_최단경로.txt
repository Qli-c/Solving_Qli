import java.io.*;
import java.util.*;

class Edge implements Comparable<Edge>
{
    int v, w;

    Edge(int v, int w)
    {
        this.v = v;
        this.w = w;
    }

    public int compareTo(Edge e)
    {
        if(this.w > e.w)
        {
            return 1;
        }
        else
        {
            return -1;
        }
    }
}

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;
    static StringTokenizer st;

    static int v, e, k;
    static boolean visited[];
    static ArrayList<Edge> edges[];
    static int distance[];

    static void dijk(int start)
    {
        PriorityQueue<Edge> queue = new PriorityQueue<Edge>();
        queue.add(new Edge(start, 0));
        distance[start] = 0;

        while(!queue.isEmpty())
        {
            Edge now = queue.poll();
            int now_v = now.v;

            if(visited[now_v])
            {
                continue;
            }

            visited[now_v] = true;

            for(Edge next : edges[now_v])
            {
                if(!visited[next.v] && distance[next.v] > distance[now_v] + next.w)
                {
                    distance[next.v] = distance[now_v] + next.w;
                    queue.add(new Edge(next.v, distance[next.v]));
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        new Main().solution();
    }

    public void solution() throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        //br = new BufferedReader(new InputStreamReader(new FileInputStream("src/main/java/src/input.txt")));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));

        st = new StringTokenizer(br.readLine());
        int v = Integer.parseInt(st.nextToken());
        int e = Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());
        int k = Integer.parseInt(st.nextToken());

        visited = new boolean[v + 1];
        distance = new int[v + 1];
        edges = new ArrayList[v + 1];

        Arrays.fill(distance, Integer.MAX_VALUE);

        for(int i = 0; i <= v; i++)
        {
            edges[i] = new ArrayList<>();
        }

        for(int i = 0; i < e; i++)
        {
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());

            edges[start].add(new Edge(end, w));
        }

        dijk(k);

        for(int i = 1; i <= v; i++)
        {
            if(distance[i] == Integer.MAX_VALUE)
            {
                System.out.println("INF");
            }
            else
            {
                System.out.println(distance[i]);
            }
        }

        bw.flush();
        bw.close();
        br.close();
    }
}
